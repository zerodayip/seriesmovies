name: Domain Link Güncelleyici

on:
  schedule:
    - cron: "0 */2 * * *"  # Her 2 saatte bir
  workflow_dispatch:        # Manuel tetikleme

concurrency:
  group: domain-link-updater
  cancel-in-progress: false  # Aynı workflow paralel çalışmaz

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Kontrol: Diğer workflow aktif mi?
        run: |
          python - <<EOF
          import os
          import sys
          import requests

          repo = os.getenv("GITHUB_REPOSITORY")
          token = os.getenv("GH_TOKEN")
          headers = {"Authorization": "token {}".format(token)}

          workflows_to_check = ["M3U MAKER", "XTREAM MAKER"]

          for wf in workflows_to_check:
              url = "https://api.github.com/repos/{}/actions/workflows".format(repo)
              r = requests.get(url, headers=headers).json()
              workflow_id = next((w["id"] for w in r.get("workflows", []) if w["name"] == wf), None)
              if workflow_id:
                  runs_url = "https://api.github.com/repos/{}/actions/workflows/{}/runs?status=in_progress".format(repo, workflow_id)
                  runs = requests.get(runs_url, headers=headers).json()
                  if runs.get("total_count", 0) > 0:
                      print("{} hâlâ çalışıyor. Domain Link Güncelleyici beklemeyecek.".format(wf))
                      sys.exit(1)
          EOF

      - name: Domain linklerini kontrol et ve güncelle
        run: |
          python - <<EOF
          import os, requests

          folder = "domain"
          changed_files = []

          def resolve_final_url(url):
              try:
                  r = requests.get(url, allow_redirects=True, timeout=10, stream=True)
                  final = r.url
                  r.close()
                  return final
              except requests.RequestException:
                  return None

          for fname in os.listdir(folder):
              if not fname.endswith(".txt"):
                  continue

              path = os.path.join(folder, fname)
              with open(path, "r", encoding="utf-8") as f:
                  url = f.read().strip()

              if not url:
                  continue

              final = resolve_final_url(url)
              domain_name = os.path.splitext(fname)[0].capitalize()

              if final is None:
                  print(f"{domain_name}\n❌ Domain kapanmış olabilir, yönlendirme veya domaine erişim yok.\nKontrol edilmesi gerekiyor.\nURL: {url}\n")
                  continue

              if final.rstrip("/") != url.rstrip("/"):
                  with open(path, "w", encoding="utf-8") as f:
                      f.write(final + "\n")
                  print(f"{domain_name}\n🔀 Domain yönlendirmesi bulundu.\nURL: {url} → {final} (txt dosyası güncellendi)\n")
                  changed_files.append(fname)
              else:
                  print(f"{domain_name}\n✅ Domain hala geçerlidir.\nURL: {url}\n")

          if changed_files:
              with open("changed_files.txt", "w") as f:
                  f.write("\n".join(changed_files))
          EOF

      - name: Commit ve push değişen dosyalar
        if: hashFiles('changed_files.txt') != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          while IFS= read -r file; do
            git add "domain/$file"
            git commit -m "Domain güncellendi: $file"
          done < changed_files.txt

          git push
